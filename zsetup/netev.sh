#!/bin/bash

# File Name:		netev.sh
# Written by:		Jacob Romero
#			Creative Engineering Solutions, LLC
# Contact:		cesllc876@gmail.com
#			admin@jrom.io
# Github Page:		www.github.com/jrom876
#
#############################################################
####### PURPOSE: LOCAL AND REMOTE NETWORK EVALUATION ########
#############################################################

## These local network evaluation routines:

## -- provide varying levels of nmap function calls (from simple 
##	device mapping to full network device interrogation) 
## -- place the nmap data in various reports 
## -- provide cat calls for easy retreival of the reports

## See: https://www.wireshark.org/tools/oui-lookup.html#
## for device MAC lookup

getnet () {
## Provides simple device mapping of all network devices,
	sudo nmap -sn 192.168.0.0/24 | grep 192.168.0. -A 2
}

fevnet () {
## Provides full interrogation of all network devices, and
## prints the output in a report (~/reports/nmap-list.txt)
## Use ctnmapl to view nmap-list.txt
	echo;
	echo 'Creating nmap report'; echo;
	sudo nmap -A -T4 -Pn 192.168.0.0/24 > ~/reports/nmap-list.txt;
	# echo 'See ~/reports/nmap-list.txt for nmap report'; echo;
	echo 'Use ctnmapl to view nmap-list.txt'; echo;
}

evnet () {
## Evaluates individual network devices, and
## prints the output in various reports (e.g.: ~/reports/<report name>-list.txt)
## Uncomment the sections you want to run.
		# echo 'Evaluating Gateway:';
		# sudo nmap -v -sn -Pn 192.168.0.1;  # ping scan
		# # sudo nmap -sS -Pn -O -v 192.168.0.1;  # script scan
		# # sudo nmap -A -T4 -Pn 192.168.0.1 > ~/reports/Gateway-list.txt; echo; # full interrogation
		# echo 'See ~/reports/Gateway-list.txt for nmap report'; echo;
		#
		# echo 'Evaluating Rpi router 12:';
		# # sudo nmap -v -sn -Pn 192.168.0.12;  # ping scan
		# # sudo nmap -sS -Pn -O -v 192.168.0.12;  # script scan
		# sudo nmap -A -T4 -Pn 192.168.0.12 > ~/reports/RPi12-list.txt; echo; # full interrogation
		# echo 'See ~/reports/RPi12-list.txt for nmap report'; echo;
		#		
		echo 'Evaluating Jetson Nano Network Connection (30):';
		# # sudo nmap -v -sn -Pn 192.168.0.30;  # ping scan
		# # sudo nmap -sS -Pn -O -v 192.168.0.30;  # script scan
		sudo nmap -A -T4 -Pn 192.168.0.30 > ~/reports/Jetson-list.txt;
		# echo 'See ~/reports/Jetson-list.txt for Jetson nmap report'; echo; # full interrogation
		echo 'Use ctjetson to access Jetson nmap report'
		echo;
		#
		# echo 'Evaluating Pi Zero W (31):';
		# sudo nmap -v -sn -Pn 192.168.0.31;  # ping scan
		# # sudo nmap -sS -Pn -O -v 192.168.0.31;  # script scan
		# # sudo nmap -A -T4 -Pn 192.168.0.31 > ~/reports/PiZero_W-list.txt; echo; # full interrogation
		# echo 'See ~/reports/PiZero_W-list.txt for nmap report'; echo;
}

#### CAT CALLS ####
## cat calls to display reports generated by this script
alias ctnmapl='cat ~/reports/nmap-list.txt | grep 192.168.0. -A 30'
alias ctgw='cat ~/reports/Gateway-list.txt | grep 192.168.0. -A 30'
alias ct12='cat ~/reports/RPi12-list.txt | grep 192.168.0. -A 30'
alias ctjetson='cat ~/reports/Jetson-list.txt | grep 192.168.0. -A 30'
alias ctzero='cat ~/reports/PiZero_W-list.txt | grep 192.168.0. -A 30'
alias ctcrsh='cat ~/reports/crash_dump_report.txt'

###################
### IP COMMANDS ###
###################
## https://linuxconfig.org/how-to-turn-on-off-ip-forwarding-in-linux

## To get current IP forwarding status
## sysctl net.ipv4.ip_forward
## or
## cat /proc/sys/net/ipv4/ip_forward

## To disable IP forwarding
## sysctl -w net.ipv4.ip_forward=0
## or
## echo 0 > /proc/sys/net/ipv4/ip_forward

## To make disable persistent on reboot
## sudo nano /etc/sysctl.conf
## and add the line 'net.ipv4.ip_forward = 0' 

## To enable IP forwarding
## sysctl -w net.ipv4.ip_forward=1
## or
## echo 1 > /proc/sys/net/ipv4/ip_forward

## To make enable persistent on reboot
## sudo nano /etc/sysctl.conf
## and add the line 'net.ipv4.ip_forward = 1'

alias ipa='ip a'
alias ipn='ip neigh' # show system arp table
alias ipl='ip -s link show' # this shows a list of the number of packets
# transmitted and received, along with collisions
alias ipk='ip link'
alias ips='ip route show' # provides info on the system's routing table
alias ipt='ip tunnel show' # provides info on the system's tunnels over IP
getIP () { # no input args; returns my IP address ($myip)
	 myip="$( dig +short myip.opendns.com @resolver1.opendns.com )"
	 echo "My WAN/Public IP address: ${myip}"
	 #echo $myip
}
getCurl () {
	 com=$( curl ifconfig.me )
	 echo "My WAN/Public IP address: ${com}"
	 #curl ifconfig.me; echo ""
}

#################
### ARP Cache ###
# for arp cache poisoning info:
# https://www.thegeekstuff.com/2012/01/arp-cache-poisoning/
alias arpe='arp -e' # show arp cache entries in default linux style
alias arpa='arp -a' # all
alias arpv='arp -v' # verbose
alias pnarp='cat /proc/net/arp' # show arp cache
alias enarp='cat /etc/networks'
alias eharp='cat /etc/hosts'
arpF () { # manually create an ARP address mapping entry
	arp -f $1
}

#################
### Wireshark ###
alias wirsh='sudo wireshark'
# For the following problem:
# couldn't run /usr/bin/dumpcap in child process: permission denied
# open a terminal and type:
# sudo dpkg-reconfigure wireshark-common
# then press the right arrow and enter for yes; then type:
# sudo chmod +x /usr/bin/dumpcap

#####################
### PORT COMMANDS ###
#####################
## https://askubuntu.com/questions/320121/simple-port-forwarding
## Note: port list is located in /etc/services
ls1usb () {
		lsusb -s :1
}
ls2usb () {
		lsusb -s 1:
}
lstusb () {
		lsusb -t
}
alias getPList='cat /etc/services' # lists all available ports
alias lsou='lsof -U'
alias lsoi='lsof -i' # display open ports; lists all Internet
# and x.25 (HP-UX) network files
lsonP () { # search all output files
	lsof -n -P | grep -i $1
}
lsoU () { # searches the current list of UNIX domain socket files
	lsof -U | grep -i $1
}

### tty ports
getTTy (){
	dmesg | grep tty
}
lsTTy (){
	ls /dev/tty*
}
getUSB (){
	ls /dev/ttyUSB*
}
getSER (){
	ls /dev/ttyS*
}
################################
## show serial port for arg only
getserial_ag (){
	setserial -ag /dev/ttyS$1
}
## show all serial ports
showAllSrPorts () {
	setserial -ag /dev/ttyS*
}
## to see which ports are available
setSerial_bg (){
	setserial -bg /dev/ttyS*
}
#############################################
## pprobe is an nping tcp port probe function
# arg1 = port number (e.g port 22)
# arg2 = host (e.g 192.168.0.1, or google.com)
pprobe () { #@@@@@@@@@@@
	sudo nping --tcp -p $1 --flags syn --ttl 2 $2
}
## Port Manipulation Functions ##
getport () { # searches port list for input arg
	cat /etc/services | grep -i $1
}
getstatus () { # searches port list for input arg
	sudo netstat -nap | grep : $1
}
openTCPPort () {
	iptables -A INPUT -p tcp -dport $1 -j ACCEPT
}
openUDPPort () {
	iptables -A INPUT -p udp -sport $1 -j ACCEPT
}
allowPort () {
	sudo ufw allow $@
}
denyPort () {
	sudo ufw deny $@
}

### PORT FORWARDING ####
## ICMP redirects
## http://www.itsyourip.com/security/how-to-disable-icmp-
## redirects-in-linux-for-security-redhatdebianubuntususe-tested/

#############################################

##################################
### NETWORK EVALUATION ROUTINE ###

## LOCAL NETWORK ROUTINE ##
#(0) First, run 'nmpe' to show all devices running on my local network.

#(1) Run nttlpn to see all active internet processes and the ports they are using

#(2) Choose a port to analyze and run 'ntipp <port>' to see all the IP addresses connected
# to my server on selected port (arg)

#(3) Run 'nmsd <debug level> <local ip address>' to perform
# script scan on local or remote host in debug mode

#(4) Run 'nmN <local ip address>' to scan a specific device on my local network
# nmN $1 : detect open TCP ports on host ($1)
# nmN <arg1> : sudo nmap -v -sn $1 (e.g. 192.168.0.0/24, or localhost)

## REMOTE NETWORK ROUTINE ##
#(0) 'mtrHost $1 $2 $3' : *** This command is VERY USEFUL ***
# Do this command to find network hops/routers connecting remote host,
# then create a report showing these connections and display the report.
# mtr -rw -c 10 <whatever.com or IPvx address> >mtr-report-whatever | cat mtr-report-whatever
# mtr -rw -c 10 google.com >mtr-report-google; cat mtr-report-google
# mtr -rwb -c 10 google.com >mtr-report-google; cat mtr-report-google
# e.g. 'mtr google .com 10' : this pings and reports on google.com 10 times

#(1) Do nmS to force a script scan on any of the hosts/routers on the mtr-report
# nmS <arg1> : sudo nmap -sS -Pn -O -v $1

#(2) Do nmtop to search the top ports on remote or local hosts
# nmtop <arg1> <arg2> : nmap --top-ports 10 192.168.0.1
# nmtop $1 $2 : search top (int $1) ports of host ($2)

#(3) Do pprobe to probe specific ports on remote or local routers
# pprobe <arg1> <arg2> : sudo nping --tcp -p $1 --flags syn --ttl 2 $2
# pprobe <arg1:port num, e.g. 22> <arg2:host (e.g 192.168.0.1, or google.com)>

###########################
### MTR (My Traceroute) ###
# mtr -rwb -c 10 google.com >mtr-report-google | cat mtr-report-google
# $1 = site name; $2 = domain; $3 = num pings 
# -b = both IPaddr and hostname; -rw = report-wide; -c = count (num pings)
mtrHost () { # e.g. <arg1:google> <arg2:.com> < arg3:10 pings>
	mtr -rwb -c $3 $1$2 >~/mtr-reports/mtr-report-$1; cat ~/mtr-reports/mtr-report-$1
}
alias rt='route'
alias rtn='sudo route -n'
alias trv='traceroute -V' # shows traceroute version
###################
### NMAP ###
############
## For more information on nmap see: https://tools.kali.org/information-gathering/nmap

## nmN finds all the wireless devices connected to host
# This is very useful to find all the set wireless devices on my network
nmN () { # detect open TCP ports on hoste.g. 192.168..0/24, or localhost
	sudo nmap -v -sn $1
}
## nmP does ARP Ping on specified host(s)
nmP () { # ARP Ping on specified host(s)
	sudo nmap -PR -O -v $1
}

alias nmpe='sudo nmap -sP -PE -PA21,22,23,25,53,80,3389,5900,5939,8080 192.168.0.*'

## nmsd runs scan on local or remote host in debug mode, skipping
# host discovery (i.e accesses blocked hosts), in verbose/debug mode;
# user sets debug level, funct takes 0 - 9 as <arg1>, default is 0
# <arg2> is address, e.g. 192.168.0.-
nmsd () {
	sudo nmap -sC -Pn -v -d$1 $2
}
## nmC runs scan on local or remote host, skipping
# host discovery, using OD Detection, in verbose/debug mode
nmC () {
	sudo nmap -sC -Pn -O -v $1
}
## nmT runs scan on open TCP hosts, skipping host discovery,
# using OD Detection, running in verbose mode
nmT () {
	sudo nmap -sT -Pn -O -v $1
}
## nmS performs scan on host (e.g, localhost, 192.168.0.1, etc.)
# Use this to script scan open ports on a remote or local host
# using OD Detection while skipping host discovery;
# arg must be a host designator
nmS () {
	sudo nmap -sS -Pn -O -v $1
}
## nmV performs scan on host (e.g, localhost, 192.168.0.1, etc.)
# Use this to scan open ports on a remote or local host
# using OD Detection while skipping host discovery;
# arg must be a host designator
nmV () {
	sudo nmap -sV -Pn -O -v $1
}
# --top-ports
# arg1 = number of ports to show, e.g. 20 = the top 20 ports
# arg2 = a host name or IPvx address (e.g. google.com or 192.168.0.1)
nmtop () {
	nmap -Pn --top-ports $1 $2
}
ncSniffIP () {
	ncat -v --exec "/bin/bash" --allow $1 -l 4444 --keep-open
}
###############
### NETSTAT ###
###############
alias nt='netstat'
alias ntg='netstat -g' # Display group connections
alias nti='netstat -i' # Display interfaces
alias ntm='netstat -M' # Display a list of masqueraded connections
alias nts='netstat -s' # Display summary statistics
alias ntr='netstat -r' # Display the kernel routing tables
alias ntt='netstat -t' # Display a list of tcp connections
alias ntu='netstat -u' # Display udp group connections
alias ntatu='netstat -atu' # Show all sockets, TCP and UDP connections
alias ntntu='netstat -ntu' # Display numerical tcp/udp addresses

# Below is an Unix command to list all the IP addresses connected
# to your server on selected port (arg)
ntipp () {
	netstat -tn 2>/dev/null | grep :$1 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head
}
ntlp () {
	sudo netstat -lnp | grep unix | awk '{print $1,FS,$7,FS,$9,FS,$10}'
}
alias ntlnp='sudo netstat -lnp' # Display open ports
alias nttlpn='sudo netstat -t -u -l -p -n' # Too much to name
# -t = TCP
# -u = UDP
# -l = listening ports only
# -n = don't look up service and host names, just display numbers
# -p = show process information (requires root privilege)
# -r = display kernal routing tables

###################################################################
###################################################################
################################################
####### END OF LOCAL NETWORK EVALUATION ########
################################################
